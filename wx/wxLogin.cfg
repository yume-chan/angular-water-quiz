var ghost = require(process.argv[2]+'/webwine/cfg/ghost.js'); 
var gapi = require(process.argv[2]+'/webwine/cmn/gapi.js');

exports.itfconf = function() {
	return new CurrentAPI().conf();
}
exports.itfleft = function(req,res,fld,fle) {
	return new CurrentAPI().output(req,res,fld,fle);
}

var CurrentAPI = gapi.BaseAPI.extend({
    conf: function() { return { auth: false,
        	type: "json",
        	itfs: [
	            {
	                host: ghost.dscm.winecenter.addr,
	                port: ghost.dscm.winecenter.port,
	                iurl: "/wechatWineUserApp?actn=wechatAuthorizationLogin",
	                uuid: "wechatWineUserApp",
	                meth: "post",
	                type: "sdcm",
	                next: [],
	                func: function(req,res,fld,fle){
	                	return new CurrentAPI("wechatWineUserApp").
	                		callFunc(req,res,fld,fle);
	                }
	            }
        	]
    	};
    },

	doCallFunc: function(uuid, req, res, fld, fle) {
		var openId = gapi.getParameter(req, "openId"),
			nickname = gapi.getParameter(req, "nickname"),
			inviteUserId = gapi.getParameter(req, "inviteUserId"),
			headImgUrl = gapi.getParameter(req, "headImgUrl");
		var ip = gapi.getIPv4(req.user.addr);
		if(gapi.emptyEqual(openId ,"")) {
			res.jsonp(gapi.toResult(1, "openId不能为空"));
			ghost.getLogger().info("[doCallFunc]IP：%s, service: wx.wxLogin, dc:wechatWineUserApp.wx.wxLogin, message: 'param error', param: username=%s", ip, openId);
			return null;
		}
		ghost.getLogger().info("[doCallFunc]IP：%s, service: wx.wxLogin, dc:wechatWineUserApp.wx.wxLogin, message: 'param', param: openId=%s,inviteUserId=%s,nickname=%s", ip, openId, inviteUserId, nickname);
	    return {
	       "claz" : "['java.lang.String','java.lang.Long','java.lang.String','java.lang.String']",
	       "json" : [openId, inviteUserId, nickname, headImgUrl]
	    };
	},

	doOutput: function(req, res, fld, fle) {
		var ip = gapi.getIPv4(req.user.addr);
		if(!req.rslt['wechatWineUserApp']){
			ghost.getLogger().error("[doOutput]IP：%s, service: wx.wxLogin, dc:wechatWineUserApp.wx.wxLogin, message: 'rslt is null', rslt: %s", ip, JSON.stringify(req.rslt['wechatWineUserApp']));
			return gapi.toResult(500, "系统异常");
		}
		if(gapi.emptyNoequal(req.rslt['wechatWineUserApp'].code, 0)) {
			//这里根据后端服务返回的code值不同提示信息不同
			if(gapi.emptyEqual(req.rslt['wechatWineUserApp'].message, "")) {
				req.rslt['wechatWineUserApp'].message = "登录失败";
			}
			ghost.getLogger().error("[doOutput]IP：%s, service: wx.wxLogin, dc:wechatWineUserApp.wx.wxLogin, message: 'rslt error', rslt: %s", ip, JSON.stringify(req.rslt['wechatWineUserApp']));
			return gapi.toResult(1, req.rslt['wechatWineUserApp'].message);
		}

		//程序执行到这里用户密码一定不会为空,直接记录到session
		var user = req.rslt['wechatWineUserApp'].user;
		var accountStatus = user.accountStatus,
	        delStatus = user.delStatus,
	        userId = user.id,
	        idCard = user.idCard,
	        memberRank = user.memberRank,
	        nickName = user.nickName,
	        phone = user.phone,
	        phoneStatus = user.phoneStatus,
	        rankName = user.rankName,
	        realStatus = user.realStatus,
	        realname = user.realname,
	        type = user.type,
	        username = user.username

		req.session.user = {
			"accountStatus":accountStatus,
	        "delStatus":delStatus,
	        "userId":userId,
	        "idCard":idCard,
	        "memberRank":memberRank,
	        "nickName":nickName,
	        "phone":phone,
	        "phoneStatus":phoneStatus,
	        "rankName":rankName,
	        "realStatus":realStatus,
	        "realname":realname,
	        "type":type,
	        "username":username
		};
		return gapi.toResult(null, null, req.rslt['wechatWineUserApp']);
	}
});
